// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.developtech.efuelfo.app;

import android.content.Context;
import android.content.SharedPreferences;
import com.developtech.efuelfo.network.AllApis;
import com.developtech.efuelfo.network.AllUrls;
import com.developtech.efuelfo.network.Api;
import com.developtech.efuelfo.network.NetworkModule;
import com.developtech.efuelfo.network.NetworkModule_GetClientFactory;
import com.developtech.efuelfo.network.NetworkModule_GetInterceptorFactory;
import com.developtech.efuelfo.network.NetworkModule_GetServiceCallerFactory;
import com.developtech.efuelfo.network.NetworkModule_ProvideAllApiFactory;
import com.developtech.efuelfo.network.NetworkModule_ProvideAllUrlsFactory;
import com.developtech.efuelfo.network.NetworkModule_ProvideApiFactory;
import com.developtech.efuelfo.network.NetworkModule_ProvideCompositeSubsFactory;
import com.developtech.efuelfo.network.NetworkModule_ProvideRetrofitBuilderFactory;
import com.developtech.efuelfo.network.NetworkModule_ProvideRetrofitFactory;
import com.developtech.efuelfo.network.NetworkModule_ProvideUtilFunctionFactory;
import com.developtech.efuelfo.network.ServiceCaller;
import com.developtech.efuelfo.util.SPUtils;
import com.developtech.efuelfo.util.UtilFunctions;
import dagger.internal.DoubleCheck;
import dagger.internal.MembersInjectors;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import rx.subscriptions.CompositeSubscription;

public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> provideContextProvider;

  private Provider<SharedPreferences> getSharedPrefProvider;

  private Provider<SPUtils> getSpUtilsProvider;

  private Provider<AllUrls> provideAllUrlsProvider;

  private Provider<Interceptor> getInterceptorProvider;

  private Provider<OkHttpClient> getClientProvider;

  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<Api> provideApiProvider;

  private Provider<AllApis> provideAllApiProvider;

  private Provider<CompositeSubscription> provideCompositeSubsProvider;

  private Provider<UtilFunctions> provideUtilFunctionProvider;

  private Provider<ServiceCaller> getServiceCallerProvider;

  private DaggerAppComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.provideContextProvider =
        DoubleCheck.provider(AppModule_ProvideContextFactory.create(builder.appModule));

    this.getSharedPrefProvider =
        DoubleCheck.provider(
            AppModule_GetSharedPrefFactory.create(builder.appModule, provideContextProvider));

    this.getSpUtilsProvider =
        DoubleCheck.provider(
            AppModule_GetSpUtilsFactory.create(builder.appModule, getSharedPrefProvider));

    this.provideAllUrlsProvider =
        DoubleCheck.provider(NetworkModule_ProvideAllUrlsFactory.create(builder.networkModule));

    this.getInterceptorProvider =
        DoubleCheck.provider(
            NetworkModule_GetInterceptorFactory.create(builder.networkModule, getSpUtilsProvider));

    this.getClientProvider =
        DoubleCheck.provider(
            NetworkModule_GetClientFactory.create(builder.networkModule, getInterceptorProvider));

    this.provideRetrofitBuilderProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitBuilderFactory.create(
                builder.networkModule, provideAllUrlsProvider, getClientProvider));

    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitFactory.create(
                builder.networkModule, provideRetrofitBuilderProvider));

    this.provideApiProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideApiFactory.create(builder.networkModule, provideRetrofitProvider));

    this.provideAllApiProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideAllApiFactory.create(builder.networkModule, provideApiProvider));

    this.provideCompositeSubsProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideCompositeSubsFactory.create(builder.networkModule));

    this.provideUtilFunctionProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideUtilFunctionFactory.create(
                builder.networkModule, provideContextProvider, provideAllUrlsProvider));

    this.getServiceCallerProvider =
        DoubleCheck.provider(
            NetworkModule_GetServiceCallerFactory.create(
                builder.networkModule,
                provideCompositeSubsProvider,
                provideUtilFunctionProvider,
                getSpUtilsProvider,
                provideContextProvider));
  }

  @Override
  public void inject(MyApplication myApplication) {
    MembersInjectors.<MyApplication>noOp().injectMembers(myApplication);
  }

  @Override
  public SPUtils getSpUtils() {
    return getSpUtilsProvider.get();
  }

  @Override
  public Api getApi() {
    return provideApiProvider.get();
  }

  @Override
  public AllApis getAllApis() {
    return provideAllApiProvider.get();
  }

  @Override
  public AllUrls getAllUrls() {
    return provideAllUrlsProvider.get();
  }

  @Override
  public ServiceCaller getServiceCaller() {
    return getServiceCallerProvider.get();
  }

  @Override
  public Context getContext() {
    return provideContextProvider.get();
  }

  @Override
  public UtilFunctions getUtilFunctions() {
    return provideUtilFunctionProvider.get();
  }

  public static final class Builder {
    private AppModule appModule;

    private NetworkModule networkModule;

    private Builder() {}

    public AppComponent build() {
      if (appModule == null) {
        throw new IllegalStateException(AppModule.class.getCanonicalName() + " must be set");
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerAppComponent(this);
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }
  }
}
