// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.developtech.efuelfo.network;

import android.content.Context;
import com.developtech.efuelfo.util.SPUtils;
import com.developtech.efuelfo.util.UtilFunctions;
import dagger.internal.Factory;
import javax.inject.Provider;
import rx.subscriptions.CompositeSubscription;

public final class ServiceCaller_Factory<T> implements Factory<ServiceCaller<T>> {
  private final Provider<CompositeSubscription> subscriptionsProvider;

  private final Provider<UtilFunctions> utilFunctionsProvider;

  private final Provider<SPUtils> spUtilsProvider;

  private final Provider<Context> contextProvider;

  public ServiceCaller_Factory(
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<UtilFunctions> utilFunctionsProvider,
      Provider<SPUtils> spUtilsProvider,
      Provider<Context> contextProvider) {
    assert subscriptionsProvider != null;
    this.subscriptionsProvider = subscriptionsProvider;
    assert utilFunctionsProvider != null;
    this.utilFunctionsProvider = utilFunctionsProvider;
    assert spUtilsProvider != null;
    this.spUtilsProvider = spUtilsProvider;
    assert contextProvider != null;
    this.contextProvider = contextProvider;
  }

  @Override
  public ServiceCaller<T> get() {
    return new ServiceCaller<T>(
        subscriptionsProvider.get(),
        utilFunctionsProvider.get(),
        spUtilsProvider.get(),
        contextProvider.get());
  }

  public static <T> Factory<ServiceCaller<T>> create(
      Provider<CompositeSubscription> subscriptionsProvider,
      Provider<UtilFunctions> utilFunctionsProvider,
      Provider<SPUtils> spUtilsProvider,
      Provider<Context> contextProvider) {
    return new ServiceCaller_Factory<T>(
        subscriptionsProvider, utilFunctionsProvider, spUtilsProvider, contextProvider);
  }
}
